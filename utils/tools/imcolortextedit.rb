# Auto-generated Ruby FFI bindings for TextEditor (based on provided C header)
# Generated by ChatGPT

require 'ffi'

module ImGuiColorTextEdit
  extend FFI::Library

  # try common library names; user can override by setting CIMGUI_LIB environment variable
  ffi_lib get_imgui_dll_path()

  # Basic typedefs
  typedef :pointer, :TextEditor_ptr

  # ImVec2 struct (passed by value in some APIs)
  class ImVec2 < FFI::Struct
    layout :x, :float,
           :y, :float
  end

  # Enums as Ruby constants
  PaletteId = {
    Dark: 0,
    Light: 1,
    Mariana: 2,
    RetroBlue: 3
  }

  LanguageDefinitionId = {
    None: 0,
    Cpp: 1,
    C: 2,
    Cs: 3,
    Python: 4,
    Lua: 5,
    Json: 6,
    Sql: 7,
    AngelScript: 8,
    Glsl: 9,
    Hlsl: 10
  }

  SetViewAtLineMode = {
    FirstVisibleLine: 0,
    Centered: 1,
    LastVisibleLine: 2
  }

  # Attach functions
  # Constructors / destructors
  attach_function :TextEditor,                :TextEditor_TextEditor,                [],                :TextEditor_ptr
  attach_function :destroy,                   :TextEditor_destroy,                   [:TextEditor_ptr], :void

  attach_function :SetReadOnlyEnabled,        :TextEditor_SetReadOnlyEnabled,        [:TextEditor_ptr,  :bool],   :void
  attach_function :IsReadOnlyEnabled,         :TextEditor_IsReadOnlyEnabled,         [:TextEditor_ptr], :bool
  attach_function :SetAutoIndentEnabled,      :TextEditor_SetAutoIndentEnabled,      [:TextEditor_ptr,  :bool],   :void
  attach_function :IsAutoIndentEnabled,       :TextEditor_IsAutoIndentEnabled,       [:TextEditor_ptr], :bool
  attach_function :SetShowWhitespacesEnabled, :TextEditor_SetShowWhitespacesEnabled, [:TextEditor_ptr,  :bool],   :void
  attach_function :IsShowWhitespacesEnabled,  :TextEditor_IsShowWhitespacesEnabled,  [:TextEditor_ptr], :bool
  attach_function :SetShowLineNumbersEnabled, :TextEditor_SetShowLineNumbersEnabled, [:TextEditor_ptr,  :bool],   :void
  attach_function :IsShowLineNumbersEnabled,  :TextEditor_IsShowLineNumbersEnabled,  [:TextEditor_ptr], :bool
  attach_function :SetShortTabsEnabled,       :TextEditor_SetShortTabsEnabled,       [:TextEditor_ptr,  :bool],   :void
  attach_function :IsShortTabsEnabled,        :TextEditor_IsShortTabsEnabled,        [:TextEditor_ptr], :bool
  attach_function :GetLineCount,              :TextEditor_GetLineCount,              [:TextEditor_ptr], :int
  attach_function :IsOverwriteEnabled,        :TextEditor_IsOverwriteEnabled,        [:TextEditor_ptr], :bool
  attach_function :SetPalette,                :TextEditor_SetPalette,                [:TextEditor_ptr,  :int],    :void
  attach_function :GetPalette,                :TextEditor_GetPalette,                [:TextEditor_ptr], :int
  attach_function :SetLanguageDefinition,     :TextEditor_SetLanguageDefinition,     [:TextEditor_ptr,  :int],    :void
  attach_function :GetLanguageDefinition,     :TextEditor_GetLanguageDefinition,     [:TextEditor_ptr], :int
  attach_function :GetLanguageDefinitionName, :TextEditor_GetLanguageDefinitionName, [:TextEditor_ptr], :string
  attach_function :SetTabSize,                :TextEditor_SetTabSize,                [:TextEditor_ptr,  :int],    :void
  attach_function :GetTabSize,                :TextEditor_GetTabSize,                [:TextEditor_ptr], :int
  attach_function :SetLineSpacing,            :TextEditor_SetLineSpacing,            [:TextEditor_ptr,  :float],  :void
  attach_function :GetLineSpacing,            :TextEditor_GetLineSpacing,            [:TextEditor_ptr], :float
  attach_function :SetDefaultPalette,         :TextEditor_SetDefaultPalette,         [:int],            :void
  attach_function :GetDefaultPalette,         :TextEditor_GetDefaultPalette,         [],                :int

# Selection / cursor
  attach_function :SelectAll,               :TextEditor_SelectAll,               [:TextEditor_ptr], :void
  attach_function :SelectLine,              :TextEditor_SelectLine,              [:TextEditor_ptr,  :int],    :void
  attach_function :SelectRegion,            :TextEditor_SelectRegion,            [:TextEditor_ptr,  :int,     :int,      :int,   :int], :void
  attach_function :SelectNextOccurrenceOf,  :TextEditor_SelectNextOccurrenceOf,  [:TextEditor_ptr,  :string,  :int,      :bool], :void
  attach_function :SelectAllOccurrencesOf,  :TextEditor_SelectAllOccurrencesOf,  [:TextEditor_ptr,  :string,  :int,      :bool], :void
  attach_function :AnyCursorHasSelection,   :TextEditor_AnyCursorHasSelection,   [:TextEditor_ptr], :bool
  attach_function :AllCursorsHaveSelection, :TextEditor_AllCursorsHaveSelection, [:TextEditor_ptr], :bool
  attach_function :ClearExtraCursors,       :TextEditor_ClearExtraCursors,       [:TextEditor_ptr], :void
  attach_function :ClearSelections,         :TextEditor_ClearSelections,         [:TextEditor_ptr], :void
  attach_function :SetCursorPosition,       :TextEditor_SetCursorPosition,       [:TextEditor_ptr,  :int,     :int],     :void
  attach_function :GetCursorPosition,       :TextEditor_GetCursorPosition,       [:TextEditor_ptr,  :pointer, :pointer], :void
  attach_function :GetFirstVisibleLine,     :TextEditor_GetFirstVisibleLine,     [:TextEditor_ptr], :int
  attach_function :GetLastVisibleLine,      :TextEditor_GetLastVisibleLine,      [:TextEditor_ptr], :int
  attach_function :SetViewAtLine,           :TextEditor_SetViewAtLine,           [:TextEditor_ptr,  :int,     :int],     :void

# Clipboard / edits
  attach_function :Copy,         :TextEditor_Copy,         [:TextEditor_ptr], :void
  attach_function :Cut,          :TextEditor_Cut,          [:TextEditor_ptr], :void
  attach_function :Paste,        :TextEditor_Paste,        [:TextEditor_ptr], :void
  attach_function :Undo,         :TextEditor_Undo,         [:TextEditor_ptr,  :int], :void
  attach_function :Redo,         :TextEditor_Redo,         [:TextEditor_ptr,  :int], :void
  attach_function :CanUndo,      :TextEditor_CanUndo,      [:TextEditor_ptr], :bool
  attach_function :CanRedo,      :TextEditor_CanRedo,      [:TextEditor_ptr], :bool
  attach_function :GetUndoIndex, :TextEditor_GetUndoIndex, [:TextEditor_ptr], :int

  # Render / tests
  attach_function :TextEditor, :TextEditor_Render,    [:TextEditor_ptr,  :string, :bool, ImVec2.by_value, :bool], :bool
  attach_function :UnitTests,  :TextEditor_UnitTests, [:TextEditor_ptr], :void

  # Manual generated / text handling
  attach_function :SetText,                   :TextEditor_SetText,                   [:TextEditor_ptr,  :string], :void
  attach_function :GetText_alloc,             :TextEditor_GetText_alloc,             [:TextEditor_ptr], :pointer
  attach_function :GetText_free,              :TextEditor_GetText_free,              [:pointer],        :void
  attach_function :GetText_static,            :TextEditor_GetText_static,            [:TextEditor_ptr], :string
  attach_function :GetText,                   :TextEditor_GetText,                   [:TextEditor_ptr], :string
  attach_function :ImGuiDebugPanel,           :TextEditor_ImGuiDebugPanel,           [:TextEditor_ptr,  :string], :void

  # Helper Ruby wrappers
  module Helpers
    extend FFI::Library

    def create
      ptr = CImGuiTextEditor.TextEditor_TextEditor()
      return ptr
    end

    def destroy(ptr)
      CImGuiTextEditor.TextEditor_destroy(ptr)
    end

    # Get text that was allocated by C; this will copy to Ruby string and free C memory
    def get_text_alloc(ptr)
      p = CImGuiTextEditor.TextEditor_GetText_alloc(ptr)
      return nil if p.null?
      str = p.read_string
      CImGuiTextEditor.TextEditor_GetText_free(p)
      str
    end

    # Get static text (do NOT free) â€” returns Ruby string but underlying memory is static
    def get_text_static(ptr)
      s = CImGuiTextEditor.TextEditor_GetText_static(ptr)
      s
    end

    # Convenience: set text
    def set_text(ptr, str)
      CImGuiTextEditor.TextEditor_SetText(ptr, str)
    end
  end

  #extend Helpers
end
