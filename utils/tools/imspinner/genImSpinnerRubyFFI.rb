# Generate C sources from "imspinner.h" written in C++.
#
#     Input file: ./imspinner.h
#     Output files:
#       ./cimspinner.h
#       ./cimspinner.cpp
#     (Config file: ./cimspinner_config.h (written by hand))
#
#     Usage:
#       $ ruby genCimSpinner.rb

StrHeader = <<EOF
# This file has been auto generated by srcript, see genImSpinnerRubyFFI.rb


#
#  The MIT License (MIT)

#  Copyright (c) 2025 dinau

#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:

#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.

#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#

require_relative '../libs/dll_path'

require 'ffi'
module ImSpinner
  extend FFI::Library
  ffi_lib get_imgui_dll_path()
EOF

def typeConv(ss)
  if ss.include? "char *" or ss.include? "char*"
    ":string"
  elsif ss.include? "*" or ss.include? "ImColor"
    ":pointer"
  elsif ss.include?  "float"
    ":float"
  elsif ss.include?  "size_t" or ss.include? "int"
    ":int"
  elsif ss.include?  "bool"
    ":bool"
  end
end

ImSpinnerHeader = "imspinner.h"
OutRB           = "imspinner.rb"

puts "Reading .. #{ImSpinnerHeader}\n...\n"
cppFile = []
cppFile.push StrHeader
idx = 1
File.foreach(ImSpinnerHeader) {|line|
  if  line =~ /\s+inline\s+void\s+(Spinner\w+)\((.+)\)/
    cArgsLongDef  = []
    cArgsShortDef = []

    funcname = $1
    cppArgs = $2

    cppFile.push  "\n# [#{sprintf("%3d",idx)}] C++ definition"
    idx += 1
    cppFile.push  "#     void Spinner::#{funcname}(#{cppArgs.gsub("/*","").gsub("*/","")})"
    # get short argumants
    # void SpinnerFadeBars(const char *label, float w, const ImColor &color = white, float speed = 2.8f, size_t bars = 3, bool scale = false)
    #  cppArgs -->         const char *label, float w, const ImColor &color = white, float speed = 2.8f, size_t bars = 3, bool scale = false
    cppArgs.split(",").each {|arg|
      if not arg.include? "="
        # C function args short
        ss = arg.gsub("&","").gsub("/*","").gsub("*/","").strip
        cArgsShortDef.push typeConv(ss)
      else
        ss = arg.split("=")[0].gsub("&","").gsub("/*","").gsub("*/","").strip
        cArgsLongDef.push typeConv(ss)
      end
    }
    #------------------------------------
    # Generate short arguments functions
    #------------------------------------
    cargs = cArgsShortDef.join(", ")
    funcname_short = funcname.split("Spinner")[1].sub(/^(\d)/, 'x\1')
    cppFile.push "  attach_function :#{funcname_short}, :#{funcname},   [#{cargs}], :void"
    #-----------------------------------
    # Generate long arguments functions
    #-----------------------------------
    if 0 != cArgsLongDef.length
      cargs = cargs + ", "  + cArgsLongDef.join(", ")
      cppFile.push "  attach_function :#{funcname_short}Ex, :#{funcname}Ex, [#{cargs}], :void"
    end
  end
}

# Output CPP source
File.open(OutRB,"w") {|fp|
  puts "Generated: #{OutRB}"
  cppFile.each {|line|
    fp.puts line
  }
  fp.puts "\n# ImSpnner demo\n  attach_function :demoSpinners,[], :void"
  fp.puts "end"
}
